#pragma checksum "/Users/carlgriffiniii/Projects/OnlyTheBest/OnlyTheBest/Pages/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "115f70fbe090a3d62b3345abd3f9835e8ac66a46"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(OnlyTheBest.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace OnlyTheBest.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/carlgriffiniii/Projects/OnlyTheBest/OnlyTheBest/Pages/_ViewImports.cshtml"
using OnlyTheBest;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"115f70fbe090a3d62b3345abd3f9835e8ac66a46", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3312bc5d6cfd1461bb3cb0638da3f8db9ad6ad0f", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/site.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "/Users/carlgriffiniii/Projects/OnlyTheBest/OnlyTheBest/Pages/Index.cshtml"
  
    ViewData["Title"] = "Home";

#line default
#line hidden
#nullable disable
            WriteLiteral("\n\n<!DOCTYPE html>\n<html>\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "115f70fbe090a3d62b3345abd3f9835e8ac66a464405", async() => {
                WriteLiteral(@"
    <title>OnlyTheBest | Home</title>
    <meta name=""viewport"" content=""width=device-width,initial-scale=1"">
    <script src=""https://polyfill.io/v3/polyfill.min.js?features=default""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/handlebars/4.7.7/handlebars.min.js""></script>
    <link href=""https://fonts.googleapis.com/css?family=Roboto"" rel=""stylesheet"">
    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "115f70fbe090a3d62b3345abd3f9835e8ac66a465052", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "115f70fbe090a3d62b3345abd3f9835e8ac66a466213", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <style>
        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map-container {
            width: 100%;
            height: 100%;
            position: relative;
            font-family: ""Roboto"", sans-serif;
            box-sizing: border-box;
        }

        #map-container button {
            background: none;
            color: inherit;
            border: none;
            padding: 0;
            font: inherit;
            font-size: inherit;
            cursor: pointer;
        }

        #map {
            position: absolute;
            left: 22em;
            top: 0;
            right: 0;
            bottom: 0;
        }

        #locations-panel {
            position: absolute;
            left: 0;
            width: 22em;
            top: 0;
            bottom: 0;
            overflow-y: auto;
            background: white;
            padding: 0.5em;
            box-sizing: border-box;
        }

        ");
                WriteLiteral(@"@media only screen and (max-width: 876px) {
            #map {
                left: 0;
                bottom: 50%;
            }

            #locations-panel {
                top: 50%;
                right: 0;
                width: unset;
            }
        }

        #locations-panel-list > header {
            padding: 1.4em 1.4em 0 1.4em;
        }

        #locations-panel-list h1.search-title {
            font-size: 1em;
            font-weight: 500;
            margin: 0;
        }

            #locations-panel-list h1.search-title > img {
                vertical-align: bottom;
                margin-top: -1em;
            }

        #locations-panel-list .search-input {
            width: 100%;
            margin-top: 0.8em;
            position: relative;
        }

        #locations-panel-list .search-input input {
            width: 100%;
            border: 1px solid rgba(0, 0, 0, 0.2);
            border-radius: 0.3em;
            height: 2.2em;
            box-sizing: border-box;
    ");
                WriteLiteral(@"        padding: 0 2.5em 0 1em;
            font-size: 1em;
        }

        #locations-panel-list .search-input-overlay {
            position: absolute;
        }

        #locations-panel-list .search-input-overlay.search {
            right: 2px;
            top: 2px;
            bottom: 2px;
            width: 2.4em;
        }

        #locations-panel-list .search-input-overlay.search button {
            width: 100%;
            height: 100%;
            border-radius: 0.2em;
            color: black;
            background: transparent;
        }

        #locations-panel-list .search-input-overlay.search .icon {
            margin-top: 0.05em;
            vertical-align: top;
        }

        #locations-panel-list .section-name {
            font-weight: 500;
            font-size: 0.9em;
            margin: 1.8em 0 1em 1.5em;
        }

        #locations-panel-list .location-result {
            position: relative;
            padding: 0.8em 3.5em 0.8em 1.4em;
            border-bottom: 1px sol");
                WriteLiteral(@"id rgba(0, 0, 0, 0.12);
            cursor: pointer;
        }

        #locations-panel-list .location-result:first-of-type {
            border-top: 1px solid rgba(0, 0, 0, 0.12);
        }

        #locations-panel-list .location-result:last-of-type {
            border-bottom: none;
        }

        #locations-panel-list .location-result.selected {
            outline: 2px solid #4285f4;
        }

        #locations-panel-list button.select-location {
            margin-bottom: 0.6em;
            text-align: left;
        }

        #locations-panel-list .location-result h2.name {
            font-size: 1em;
            font-weight: 500;
            margin: 0;
        }

        #locations-panel-list .location-result .address {
            font-size: 0.9em;
            margin-bottom: 0.5em;
        }

        #locations-panel-list .location-result .distance {
            position: absolute;
            top: 0.9em;
            right: 0;
            text-align: center;
            font-size: 0.9em;
     ");
                WriteLiteral(@"       width: 5em;
        }

        #location-results-list {
            list-style-type: none;
            margin: 0;
            padding: 0;
        }
    </style>
    <script>'use strict';

        /**
         * Defines an instance of the Locator+ solution, to be instantiated
         * when the Maps library is loaded.
         */
        function LocatorPlus(configuration) {
            const locator = this;

            locator.locations = configuration.locations || [];
            locator.capabilities = configuration.capabilities || {};

            const mapEl = document.getElementById('map');
            const panelEl = document.getElementById('locations-panel');
            locator.panelListEl = document.getElementById('locations-panel-list');
            const sectionNameEl =
                document.getElementById('location-results-section-name');
            const resultsContainerEl = document.getElementById('location-results-list');

            const itemsTemplate = Handlebars.compile(
      ");
                WriteLiteral(@"          document.getElementById('locator-result-items-tmpl').innerHTML);

            locator.searchLocation = null;
            locator.searchLocationMarker = null;
            locator.selectedLocationIdx = null;
            locator.userCountry = null;

            // Initialize the map -------------------------------------------------------
            locator.map = new google.maps.Map(mapEl, configuration.mapOptions);

            // Store selection.
            const selectResultItem = function (locationIdx, panToMarker, scrollToResult) {
                locator.selectedLocationIdx = locationIdx;
                for (let locationElem of resultsContainerEl.children) {
                    locationElem.classList.remove('selected');
                    if (getResultIndex(locationElem) === locator.selectedLocationIdx) {
                        locationElem.classList.add('selected');
                        if (scrollToResult) {
                            panelEl.scrollTop = locationElem.offsetTop;
         ");
                WriteLiteral(@"               }
                    }
                }
                if (panToMarker && (locationIdx != null)) {
                    locator.map.panTo(locator.locations[locationIdx].coords);
                }
            };

            // Create a marker for each location.
            const markers = locator.locations.map(function (location, index) {
                const marker = new google.maps.Marker({
                    position: location.coords,
                    map: locator.map,
                    title: location.title,
                });
                marker.addListener('click', function () {
                    selectResultItem(index, false, true);
                });
                return marker;
            });

            // Fit map to marker bounds.
            locator.updateBounds = function () {
                const bounds = new google.maps.LatLngBounds();
                if (locator.searchLocationMarker) {
                    bounds.extend(locator.searchLocationMarker.getPositio");
                WriteLiteral(@"n());
                }
                for (let i = 0; i < markers.length; i++) {
                    bounds.extend(markers[i].getPosition());
                }
                locator.map.fitBounds(bounds);
            };
            if (locator.locations.length) {
                locator.updateBounds();
            }

            // Get the distance of a store location to the user's location,
            // used in sorting the list.
            const getLocationDistance = function (location) {
                if (!locator.searchLocation) return null;

                // Use travel distance if available (from Distance Matrix).
                if (location.travelDistanceValue != null) {
                    return location.travelDistanceValue;
                }

                // Fall back to straight-line distance.
                return google.maps.geometry.spherical.computeDistanceBetween(
                    new google.maps.LatLng(location.coords),
                    locator.searchLocation.location);
  ");
                WriteLiteral(@"          };

            // Render the results list --------------------------------------------------
            const getResultIndex = function (elem) {
                return parseInt(elem.getAttribute('data-location-index'));
            };

            locator.renderResultsList = function () {
                let locations = locator.locations.slice();
                for (let i = 0; i < locations.length; i++) {
                    locations[i].index = i;
                }
                if (locator.searchLocation) {
                    sectionNameEl.textContent =
                        'Nearest locations (' + locations.length + ')';
                    locations.sort(function (a, b) {
                        return getLocationDistance(a) - getLocationDistance(b);
                    });
                } else {
                    sectionNameEl.textContent = `All locations (${locations.length})`;
                }
                const resultItemContext = { locations: locations };
                res");
                WriteLiteral(@"ultsContainerEl.innerHTML = itemsTemplate(resultItemContext);
                for (let item of resultsContainerEl.children) {
                    const resultIndex = getResultIndex(item);
                    if (resultIndex === locator.selectedLocationIdx) {
                        item.classList.add('selected');
                    }

                    const resultSelectionHandler = function () {
                        selectResultItem(resultIndex, true, false);
                    };

                    // Clicking anywhere on the item selects this location.
                    // Additionally, create a button element to make this behavior
                    // accessible under tab navigation.
                    item.addEventListener('click', resultSelectionHandler);
                    item.querySelector('.select-location')
                        .addEventListener('click', function (e) {
                            resultSelectionHandler();
                            e.stopPropagation();
          ");
                WriteLiteral(@"              });
                }
            };

            // Optional capability initialization --------------------------------------
            initializeSearchInput(locator);
            initializeDistanceMatrix(locator);

            // Initial render of results -----------------------------------------------
            locator.renderResultsList();
        }

        /** When the search input capability is enabled, initialize it. */
        function initializeSearchInput(locator) {
            const geocodeCache = new Map();
            const geocoder = new google.maps.Geocoder();

            const searchInputEl = document.getElementById('location-search-input');
            const searchButtonEl = document.getElementById('location-search-button');

            const updateSearchLocation = function (address, location) {
                if (locator.searchLocationMarker) {
                    locator.searchLocationMarker.setMap(null);
                }
                if (!location) {
              ");
                WriteLiteral(@"      locator.searchLocation = null;
                    return;
                }
                locator.searchLocation = { 'address': address, 'location': location };
                locator.searchLocationMarker = new google.maps.Marker({
                    position: location,
                    map: locator.map,
                    title: 'My location',
                    icon: {
                        path: google.maps.SymbolPath.CIRCLE,
                        scale: 12,
                        fillColor: '#3367D6',
                        fillOpacity: 0.5,
                        strokeOpacity: 0,
                    }
                });

                // Update the locator's idea of the user's country, used for units. Use
                // `formatted_address` instead of the more structured `address_components`
                // to avoid an additional billed call.
                const addressParts = address.split(' ');
                locator.userCountry = addressParts[addressParts.length - 1");
                WriteLiteral(@"];

                // Update map bounds to include the new location marker.
                locator.updateBounds();

                // Update the result list so we can sort it by proximity.
                locator.renderResultsList();

                locator.updateTravelTimes();
            };

            const geocodeSearch = function (query) {
                if (!query) {
                    return;
                }

                const handleResult = function (geocodeResult) {
                    searchInputEl.value = geocodeResult.formatted_address;
                    updateSearchLocation(
                        geocodeResult.formatted_address, geocodeResult.geometry.location);
                };

                if (geocodeCache.has(query)) {
                    handleResult(geocodeCache.get(query));
                    return;
                }
                const request = { address: query, bounds: locator.map.getBounds() };
                geocoder.geocode(request, function (results, statu");
                WriteLiteral(@"s) {
                    if (status === 'OK') {
                        if (results.length > 0) {
                            const result = results[0];
                            geocodeCache.set(query, result);
                            handleResult(result);
                        }
                    }
                });
            };

            // Set up geocoding on the search input.
            searchButtonEl.addEventListener('click', function () {
                geocodeSearch(searchInputEl.value.trim());
            });

            // Initialize Autocomplete.
            initializeSearchInputAutocomplete(
                locator, searchInputEl, geocodeSearch, updateSearchLocation);
        }

        /** Add Autocomplete to the search input. */
        function initializeSearchInputAutocomplete(
            locator, searchInputEl, fallbackSearch, searchLocationUpdater) {
            // Set up Autocomplete on the search input. Bias results to map viewport.
            const autocomplete = new");
                WriteLiteral(@" google.maps.places.Autocomplete(searchInputEl, {
                types: ['geocode'],
                fields: ['place_id', 'formatted_address', 'geometry.location']
            });
            autocomplete.bindTo('bounds', locator.map);
            autocomplete.addListener('place_changed', function () {
                const placeResult = autocomplete.getPlace();
                if (!placeResult.geometry) {
                    // Hitting 'Enter' without selecting a suggestion will result in a
                    // placeResult with only the text input value as the 'name' field.
                    fallbackSearch(placeResult.name);
                    return;
                }
                searchLocationUpdater(
                    placeResult.formatted_address, placeResult.geometry.location);
            });
        }

        /** Initialize Distance Matrix for the locator. */
        function initializeDistanceMatrix(locator) {
            const distanceMatrixService = new google.maps.DistanceMatrixServic");
                WriteLiteral(@"e();

            // Annotate travel times to the selected location using Distance Matrix.
            locator.updateTravelTimes = function () {
                if (!locator.searchLocation) return;

                const units = (locator.userCountry === 'USA') ?
                    google.maps.UnitSystem.IMPERIAL :
                    google.maps.UnitSystem.METRIC;
                const request = {
                    origins: [locator.searchLocation.location],
                    destinations: locator.locations.map(function (x) {
                        return x.coords;
                    }),
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: units,
                };
                const callback = function (response, status) {
                    if (status === 'OK') {
                        const distances = response.rows[0].elements;
                        for (let i = 0; i < distances.length; i++) {
                            const distResult = distances");
                WriteLiteral(@"[i];
                            let travelDistanceText, travelDistanceValue;
                            if (distResult.status === 'OK') {
                                travelDistanceText = distResult.distance.text;
                                travelDistanceValue = distResult.distance.value;
                            }
                            const location = locator.locations[i];
                            location.travelDistanceText = travelDistanceText;
                            location.travelDistanceValue = travelDistanceValue;
                        }

                        // Re-render the results list, in case the ordering has changed.
                        locator.renderResultsList();
                    }
                };
                distanceMatrixService.getDistanceMatrix(request, callback);
            };
        }
    </script>
    <script>
        const CONFIGURATION = {
            ""locations"": [
                { ""title"": ""Hyde Park"", ""address1"": ""Hyde Park"", ""addres");
                WriteLiteral(@"s2"": ""Chicago, IL, USA"", ""coords"": { ""lat"": 41.79497221734012, ""lng"": -87.59172357976227 }, ""placeId"": ""1"", ""test"": ""gang1"" },
                { ""title"": ""Chicago"", ""address1"": ""Chicago"", ""address2"": ""IL, USA"", ""coords"": { ""lat"": 41.878157036545694, ""lng"": -87.62979283558195 }, ""placeId"": ""2"", ""test"": ""gan2g"" },
                { ""title"": ""Little Village"", ""address1"": ""Little Village"", ""address2"": ""Chicago, IL, USA"", ""coords"": { ""lat"": 41.844600481560015, ""lng"": -87.7050606932541 }, ""placeId"": ""3"", ""test"": ""gang3"" }
            ],
            ""mapOptions"": { ""center"": { ""lat"": 38.0, ""lng"": -100.0 }, ""fullscreenControl"": true, ""mapTypeControl"": false, ""streetViewControl"": false, ""zoom"": 4, ""zoomControl"": true, ""maxZoom"": 17 },
            ""mapsApiKey"": ""API_KEY""
        };

        function initMap() {
            new LocatorPlus(CONFIGURATION);
        }</script>
    <script id=""locator-result-items-tmpl"" type=""text/x-handlebars-template"">
        {{#each locations}}
        <l");
                WriteLiteral(@"i class=""location-result"" data-location-index=""{{index}}"">
            <button class=""select-location"">
                <h2 class=""name"">{{title}}</h2>
            </button>
            <div class=""address"">{{address1}}<br>{{address2}}</div>
        </li>
        {{/each}}
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "115f70fbe090a3d62b3345abd3f9835e8ac66a4627515", async() => {
                WriteLiteral(@"
    <div id=""map-container"">
        <div id=""locations-panel"">
            <div id=""locations-panel-list"">
                <header>
                    <h1 class=""search-title"">
                        <img src=""https://fonts.gstatic.com/s/i/googlematerialicons/place/v15/24px.svg"" />
                        OnlyTheBest
                    </h1>
                    <div class=""search-input"">
                        <input id=""location-search-input"" placeholder=""Enter a city"">
                        <div id=""search-overlay-search"" class=""search-input-overlay search"">
                            <button id=""location-search-button"">
                                <img class=""icon"" src=""https://fonts.gstatic.com/s/i/googlematerialicons/search/v11/24px.svg"" alt=""Search"" />
                            </button>
                        </div>
                    </div>
                </header>
                <div class=""section-name"" id=""location-results-section-name"">
                    All locations
        ");
                WriteLiteral(@"        </div>
                <div class=""results"">
                    <ul id=""location-results-list""></ul>
                </div>
            </div>
        </div>
        <div id=""map"">
        </div>
    </div>
    <script src=""https://maps.googleapis.com/maps/api/js?key=API_KEY&callback=initMap&libraries=places,geometry&solution_channel=GMP_QB_locatorplus_v4_cABD"" async defer></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
